-------------------------------------------------------------------
-- Documentação para flexbox: https://css-tricks.com/snippets/css/a-guide-to-flexbox/
-------------------------------------------------------------------

* display: inline
- Colocando display: inline nos elementos permite eles se posicionarem um do lado do outro, o problema do display: inline é que os elementos não 
aceitam mais que seja modificada tanto a width quanto a height. Isso limita MUITO nossas possibilidades.

* display: inline-block
- O display: inline-block permite os elementos se posicionarem um do lado do outro porém, diferentemente do display: inline ele permite que os 
elementos tenham sua width e height modificadas. Por esse motivo o display: inline-block é muito mais interessante na maioria dos casos 
do que o display: inline.

- O problema de usar display: inline-block é espaçar os elementos entre si. Para fazer isso teríamos que colocar margins e fazer contas.

* float: left | right
- O float é mais complicado, ele empurra o elemento para um dos lados (left | right) e os elementos que estão embaixo sobem. 
Isso nem sempre é o que a gente quer. Além do mais o float não permite que usemos a propriedade vertical-align: middle para alinhar os elementos 
verticalmente. Ou seja, para contornar isso uma possibilidade seria ter que colocar margin-top ou bottom nos elementos e usar os temidos 
números mágicos!

* display: flex
- O display: flex veio com o intuito de facilitar nossa vida nesses aspectos de posicionamento. Ele permite os elementos ficarem um do lado do outro, 
permite espaçar os elementos de forma mais intuitiva e sem ter que fazer cálculos. Além disso ele também permite alinhar os elementos verticalmente de 
forma fácil.
- O display flex pode ser um pouco mais complicado de usar tendo em vista que existem diversas propriedades que vem junto da especificação flexible box, 
todavia tudo isso foi feito para justamente melhorar nosso código.


---------------------------------------------------------------------
-- Propriedade align-items
---------------------------------------------------------------------
A propriedade align-items faz com que os elementos dentro do pai que está com flex se alinhem verticalmente, portanto, pra eles ficarem alinhados 
no centro podemos usar align-items: center, colocando essa propriedade no pai dos elementos que queremos alinhar, no caso cabecalho.
---------------------------------------------------------------------

---------------------------------------------------------------------
-- Formas de espaçar os elementos
---------------------------------------------------------------------
* A propriedade justfy-content, possui deferentes valores. Podemos distribuir os elementos dentro do pai de diversas formas, 
podemos por exemplo:

- Colocar todo espaço à esquerda, jogando o conteúdo para direita com justify-content: flex-end.

- Colocar todo espaço à direita, jogando o conteúdo para esquerda com justify-content: flex-start (que é o padrão).

- Colocar todo espaço à esquerda e à direita, jogando o conteúdo para o meio com justify-content: center.

- Colocar todo espaço entre os elementos como vimos antes usando justify-content: space-between.

- E uma possibilidade bem interessante também é colocar o espaço em volta dos elementos. Podemos usar o justify-content: space-around para isso.
---------------------------------------------------------------------

---------------------------------------------------------------------
-- Elementos na vertical
---------------------------------------------------------------------
* Com o display: flex, os elementos por padrão ficam um ao lado do outros, simulando o comportamento inline. Porém, é possível modificar esse padrão
para que os elementos se posicionem um abaixo do outro, como se fosse em blocos. 
- Podemos colocar flex-direction: column no pai, dessa forma ele muda o fluxo o qual o flexbox renderiza os elementos. Assim eles ficam um em baixo do outro.
---------------------------------------------------------------------

---------------------------------------------------------------------
-- Evitando que o conteúdo seja transbordado
---------------------------------------------------------------------
* Para evitar este tipo de situação, utilizamos o wrap. Esse atributo evita que o conteúdo ultrapasse o tamanho do elemento pai, forçando que ao invés de transbordar,
ele passe para a proxima coluna do espaço em branco que houver no elemento pai.

- Para fazer isso usamos flex-wrap: wrap

---------------------------------------------------------------------
-- De desktop para mobile
---------------------------------------------------------------------
* Quando estamos lidando com telas maiores e dispositivos desktop, o fluxo que utilizamos é inline, ou seja, um ao lado do outro, 
porém, ao lidar com dispositivos móveis, precisamos alterar esse fluxo para que o espaço seja alterado no sentido de cima para baixo, 
ou seja, em formato de coluna. Assim sendo, temos o seguinte atributo do flex box:

- flex-direction: column

---------------------------------------------------------------------

---------------------------------------------------------------------
-- Flex container e flex items
---------------------------------------------------------------------
* Quando colocamos display: flex em um elemento, o navegador passa a considerar esse elemento como um flex container, ou seja, 
cria todo aquele comportamento que vimos anteriormente no curso, os filhos ficam um do lado do outro e podemos aplicar propriedades para espaçá-los.

- Os filhos de um flex container por sua vez também ganham um nome, são chamados de flex items.

- Quando utilizamos flexbox temos que ficar atentos em quem colocamos as propriedades de espaçamento e distribuição do flex. 
Por exemplo, existem algumas propriedades que devem ser aplicadas à flex container e outras que devem ser aplicadas nos flex items.

---------------------------------------------------------------------

---------------------------------------------------------------------
-- Propriedades do flex container e dos flex items
---------------------------------------------------------------------
* flex container:
- justify-content, align-items, flex-direction, flex-wrap

* flex items:
- order, flex-grow, flex-shrink

* A propriedade display: flex pode ser usada nos dois. Se for usada em um flex item esse elemento será tanto um flex item quanto um flex container.

---------------------------------------------------------------------

---------------------------------------------------------------------
-- Seguindo a documentação temos:
---------------------------------------------------------------------
* container:
- display: flex
- flex-direction
- justify-content
- flex-wrap
- flex-flow
- align-items
- align-content

* flex item:
- order
- flex-grow
- flex-shrink
- flex-basis
- flex
- align-self

Documentação para consulta: https://css-tricks.com/snippets/css/a-guide-to-flexbox/
---------------------------------------------------------------------

---------------------------------------------------------------------
-- Site para exercícios: http://flexboxfroggy.com/
---------------------------------------------------------------------

---------------------------------------------------------------------
-- Fazendo os elementos preencher o espaço vazio
---------------------------------------------------------------------
* Digamos que temos dois flex items e que precisamos que um desses elementos ocupe todo o espaço que está sobrando do flex container. Como podemos fazer isso?
- Podemos usar a propriedade flex-grow. O código ficaria assim:
.flex-item {
  flex-grow: 1;
}

- Para falar para um elemento / flex item crescer e ocupar todo o espaço que está sobrando dentro do flex container devemos usar a propriedade flex-grow
---------------------------------------------------------------------

---------------------------------------------------------------------
-- Contas no flex
---------------------------------------------------------------------
* A propriedade flex-grow vista no exercício anterior ajuda muito caso queiramos que um elemento ocupe toda a largura restante do flex container.
Por exemplo, se temos:

- Elemento 1: 200 px.

- Elemento 2: 200 px.

- Espaço vazio que sobrou do flex container: 600 px.

- Total: 1000 px.

* Se colocamos flex-grow: 1 no primeiro elemento, ele passa a ter 800 px de largura, ou seja:

- Espaço vazio + Elemento 1: 800 px.

- E o segundo elemento continua tendo 200 px de largura.
---------------------------------------------------------------------

* Agora, se colocarmos flex-grow: 1 nos dois elementos, o que aconteceria? Qual tamanho ficaria o elemento 1? E o elemento 2?

- O que aconteceria é o seguinte:

- Considere o espaço vazio inicial: 600 px.

- Como os dois elementos tem flex-grow: 1, a soma de flex-grow que temos vai dar 1 + 1 = 2.

- O navegador pega esse espaço vazio e divide pelo número de flex-grow que temos: 600 px : 2 = 300 px.

- Agora ele distribui esse espaço para cada um dos elementos que colocamos flex-grow.

- Elemento 1: 300 px + 200 px = 500 px.

- Elemento 2: 300 px + 200 px = 500 px.
---------------------------------------------------------------------

---------------------------------------------------------------------
-- Definindo largura dos elementos com flex
---------------------------------------------------------------------
* A propriedade flex-basis serve para que?

- A propriedade flex-basis serve para definir uma largura para o elemento caso o flex container esteja com flex-direction: row.
flex-basis: 500px;

- A propriedade flex-basis serve para definir uma altura para o elemento caso o flex container esteja com flex-direction: column.
flex-basis: 500px;

A propriedade flex-basis serve para definir uma largura ou altura para o flex item. Se o flex container tiver com 
flex-direction: column, o flex-basis no flex item servirá para definir uma height. Caso o flex-direction: row, ele funciona como um width.
---------------------------------------------------------------------

---------------------------------------------------------------------
-- Condensando flex-grow, shrink e basis
---------------------------------------------------------------------
* Qual é a propriedade que usamos para condensar as propriedades flex-grow, flex-shrink e flex-basis?

- A propriedade é a propriedade flex.
- flex: 1 1 300px;
- A ordem dos valores é: flex-grow, flex-shrink, flex-basis.
---------------------------------------------------------------------

---------------------------------------------------------------------
-- Invertendo a ordem de todos os elementos
---------------------------------------------------------------------
* O flex permite que nós possamos alterar muitas coisas nos elementos, seja distribuição dos espaços, tamanhos, direção de renderização e alinhamento. 
Além de tudo isso também podemos mudar o sentido nos quais os nossos elementos são renderizados. Faça o teste. Abra nossa página principal do site index.html, 
lembra do grid que fizemos? O CSS que usamos deve estar assim:

.conteudoPrincipal-cursos {
  display: flex;
  flex-wrap: wrap;
}

Mude agora o flex-wrap. Coloque flex-wrap: wrap-reverse

.conteudoPrincipal-cursos {
  display: flex;
  flex-wrap: wrap-reverse;
}

* Tudo que estava em baixo foi para cima! Ele inverteu a ordem das linhas!

Tente agora:

.conteudoPrincipal-cursos {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row-reverse;
}

Repare que agora ele inverteu a ordem dos elementos nas linhas.

Podemos usar também flex-direction: column-reverse nos casos em que usamos flex-direction: column. Ele inverterá a ordem!
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
---------------------------------------------------------------------
